/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
/*#define L__GAMING 1
#define L__NAV__SYM 2
#define L__WM 3
#define L__FN__OSM 4
#define L__MOUSE 5
#define L__SETTINGS 6

#define NAV_PREV_TAB  &kp LA(LBKT)
#define NAV_NEXT_TAB  &kp LA(RBKT)
#define NAV_PREV_PANE &kp LC(LA(LBKT))
#define NAV_NEXT_PANE &kp LC(LA(RBKT))
#define NAV_PREV_WIN  &kp LG(LBKT)
#define NAV_NEXT_WIN  &kp LG(RBKT)
#define NAV_SWAP_MAIN &kp LG(LA(EQUAL))

#define WM_A1     &kp F16
#define WM_A2     &kp F17
#define WM_A3     &kp F18
#define WM_R1     &kp F13
#define WM_R2     &kp F14
#define WM_R3     &kp F15
#define WM_P1     &kp F19
#define WM_P2     &kp LA(F14)
#define WM_P3     &kp LA(F15)
#define WM_SYS    &kp LA(F13)
#define WM_LAYOUT &kp LA(F19)
#define WM_REFLOW &kp LA(F18)

// Auto Shift
#define AS(keycode) &as LS(keycode) keycode

/ {

// key-positions for combos
// 0  1  2  3  4  5  -  -  |  -  -  6  7  8  9  10 11
// 12 13 14 15 16 17 -  -  |  -  -  18 19 20 21 22 23
// 24 25 26 27 28 29 30 31 |  32 33 34 35 36 37 38 39
// -  -  -  40 41 42 43 -  |  -  44 45 46 47

        combos {
                compatible = "zmk,combos";
                combo_lpar {
                        timeout-ms = <50>;
                        key-positions = <15 16>;
                        bindings = <&kp KP_LPAR>;
                };
                combo_rpar {
                        timeout-ms = <50>;
                        key-positions = <19 20>;
                        bindings = <&kp KP_RPAR>;
                };
                combo_lbrc {
                        timeout-ms = <50>;
                        key-positions = <27 28>;
                        bindings = <&kp LBRC>;
                };
                combo_rbrc {
                        timeout-ms = <50>;
                        key-positions = <35 36>;
                        bindings = <&kp RBRC>;
                };
                combo_lt {
                        timeout-ms = <50>;
                        key-positions = <3 4>;
                        bindings = <&kp LT>;
                };
                combo_gt {
                        timeout-ms = <50>;
                        key-positions = <7 8>;
                        bindings = <&kp GT>;
                };
                combo_lbkt {
                        timeout-ms = <50>;
                        key-positions = <15 17>;
                        bindings = <&kp LBKT>;
                };
                combo_rbkt {
                        timeout-ms = <50>;
                        key-positions = <18 20>;
                        bindings = <&kp RBKT>;
                };
        };

        behaviors {
                tp: tap_preferred {
                        compatible = "zmk,behavior-hold-tap";
                        label = "TAP_PREFERRED";
                        #binding-cells = <2>;
                        tapping-term-ms = <150>;
                        quick-tap-ms = <0>;
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                };
                tpl: tap_preferred_layer {
                        compatible = "zmk,behavior-hold-tap";
                        label = "TAP_PREFERRED_LAYER";
                        #binding-cells = <2>;
                        tapping-term-ms = <150>;
                        quick-tap-ms = <0>;
                        flavor = "balanced";
                        bindings = <&mo>, <&kp>;
                };
                hp: hold_preferred {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOLD_PREFERRED";
                        #binding-cells = <2>;
                        tapping-term-ms = <150>;
                        quick-tap-ms = <0>;
                        flavor = "hold-preferred";
                        bindings = <&kp>, <&kp>;
                };
                hpl: hold_preferred_layer {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOLD_PREFERRED_LAYER";
                        #binding-cells = <2>;
                        tapping-term-ms = <150>;
                        quick-tap-ms = <0>;
                        flavor = "hold-preferred";
                        bindings = <&mo>, <&kp>;
                };
                as: auto_shift {
                        compatible = "zmk,behavior-hold-tap";
                        label = "AUTO_SHIFT";
                        #binding-cells = <2>;
                        tapping_term_ms = <200>;
                        quick_tap_ms = <0>;
                        flavor = "tap-preferred";
                        bindings = <&kp>, <&kp>;
                };
        };
*/
        keymap {
                compatible = "zmk,keymap";
                DEFAULT {
                        bindings = <
   &kp TAB       &kp Q &kp W &kp F &kp P    &kp B                                                          &kp J    &kp L   &kp U        &kp Y      &kp SEMI &kp MINUS
   &kp ESC       &kp A &kp R &kp S &kp T    &kp G                                                          &kp M    &kp N   &kp E        &kp I      &kp O    &kp SQT
   &kp LALT      &kp Z &kp X &kp C &kp D    &kp V                                                          &kp K    &kp H   &kp COMMA &kp DOT &kp FSLH &kp DELETE
                                   &kp F1   &kp SPACE &kp LGUI                        &kp RET &kp F2   &kp F3
                        >;
                };
/*
                default__L {
                        bindings = <
   &kp TAB       &kp Q &kp W &kp F &kp P    &kp B                                                          &kp J        &kp L   &kp U        &kp Y      AS(SEMI) AS(MINUS)
   &kp ESC       &kp A &kp R &kp S &kp T    &kp G                                                          &kp M        &kp N   &kp E        &kp I      &kp O    AS(SQT)
   &hp LALT HOME &kp Z &kp X &kp C &kp D    &kp V            &none    &none          &none   &none         &kp K        &kp H   &tpl 5 COMMA &tpl 3 DOT AS(FSLH) &hp RALT DELETE
                             &none &none    &hp LSHIFT SPACE &kp LGUI                        &hp LCTRL RET &hpl 2 BSPC  &none   &none
                        >;
                };

                gaming__L {
                        bindings = <
   &trans  &trans   &trans   &trans   &trans   &trans                                       &trans   &trans   &trans   &trans   &trans   &trans
   &trans  &trans   &trans   &trans   &trans   &trans                                       &trans   &trans   &trans   &trans   &trans   &trans
   &trans  &trans   &trans   &trans   &trans   &trans  &trans  &trans     &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans
                             &trans   &trans   &trans  &trans                      &trans   &trans   &trans   &trans
                        >;
                };

                nav__sym__L {
                        bindings = <
   &trans   NAV_PREV_PANE NAV_PREV_TAB &kp UP   NAV_NEXT_TAB  NAV_NEXT_PANE                                       &trans    AS(N4)   AS(N5)   AS(N6)    &trans     &trans
   &trans   NAV_PREV_WIN  &kp LEFT     &kp DOWN &kp RIGHT     NAV_NEXT_WIN                                        AS(GRAVE) AS(N1)   AS(N2)   AS(N3)    &kp KP_N0  AS(EQUAL)
   &trans   &trans        &trans       &trans   &kp END       NAV_SWAP_MAIN &trans  &trans        &trans  &trans  &trans    AS(N7)   AS(N8)   &kp KP_N9 AS(BSLH)   &trans
                                       &trans   &trans        &trans        &trans                        &trans  &trans    &trans   &trans
                        >;
                };

                wm__L {
                        bindings = <
   &trans  &trans   WM_R3  WM_R2   WM_R1   WM_LAYOUT                                                  &trans  &trans   &trans   &trans   &trans   &trans
   &trans  &trans   WM_A3  WM_A2   WM_A1   WM_REFLOW                                                  &trans  &trans   &trans   &trans   &trans   &trans
   &trans  &trans   WM_P3  WM_P2   WM_P1   WM_SYS                &trans  &trans     &trans   &trans   &trans  &trans   &trans   &trans   &trans   &trans
                           &trans  &trans  &mt LSHIFT LG(SPACE)  &trans                      &trans   &trans  &trans   &trans
                        >;
                };

                fn__osm__L {
                        bindings = <
   &trans  &kp F1 &kp F2  &kp F3  &kp F4  &trans                                       &trans  &trans   &trans   &trans   &trans   &trans
   &trans  &kp F5 &kp F6  &kp F7  &kp F8  &trans                                       &trans  &trans   &trans   &trans   &trans   &trans
   &trans  &kp F9 &kp F10 &kp F11 &kp F12 &trans  &trans  &trans     &trans   &trans   &trans  &trans   &trans   &trans   &trans   &trans
                          &trans  &trans  &trans  &trans                      &trans   &trans  &trans   &trans
                        >;
                };

                mouse__L {
                        bindings = <
   &trans  &trans   &trans   &trans   &trans   &trans                                       &trans  &trans   &trans   &trans   &trans   &trans
   &trans  &trans   &trans   &trans   &trans   &trans                                       &trans  &trans   &trans   &trans   &trans   &trans
   &trans  &trans   &trans   &trans   &trans   &trans  &trans  &trans     &trans   &trans   &trans  &trans   &trans   &trans   &trans   &trans
                             &trans   &trans   &trans  &trans                      &trans   &trans  &trans   &trans
                        >;
                };

                settings__L {
                        bindings = <
   &trans  &trans   &trans   &trans   &trans   &trans                                       &trans  &trans   &trans   &trans   &trans   &trans
   &trans  &trans   &trans   &trans   &trans   &trans                                       &trans  &trans   &trans   &trans   &trans   &trans
   &trans  &trans   &trans   &trans   &trans   &trans  &trans  &trans     &trans   &trans   &trans  &trans   &trans   &trans   &trans   &trans
                             &trans   &trans   &trans  &trans                      &trans   &trans  &trans   &trans
                        >;
                };
*/
/*
                blank__L {
                        bindings = <
   &trans  &trans   &trans   &trans   &trans   &trans                                       &trans  &trans   &trans   &trans   &trans   &trans
   &trans  &trans   &trans   &trans   &trans   &trans                                       &trans  &trans   &trans   &trans   &trans   &trans
   &trans  &trans   &trans   &trans   &trans   &trans  &trans  &trans     &trans   &trans   &trans  &trans   &trans   &trans   &trans   &trans
                             &trans   &trans   &trans  &trans                      &trans   &trans  &trans   &trans
                        >;
                };
*/
        };
};
